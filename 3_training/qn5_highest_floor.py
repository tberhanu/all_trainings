#!/usr/bin/evn python3

import random
def get_highest_floor():
    """get_highest_floor() --> a function giving the highest safe floor to drop our eggs from.

    :return: integer
    """
    floors = make_floors()
    index_sum = 0
    return highest_safe_floor(floors, index_sum)

def make_floors():
    """make_floors() --> a function making and returning an array of 100 floors and naming them as "Safe" for floors starting the randomly
    generated floor and below; also naming other floors above the randomly generated floor as "Risky".

    :return: Array of integers
    """
    floors = []
    highest_safe_floor = random.randint(1, 100) # throws random int including 100
    print("For the sake of testing the result, here is the expected highest floor number: {}".format(highest_safe_floor))
    for i in range(1, 101):
        if i <= highest_safe_floor:
            floors.append("Safe")
        else:
            floors.append("Risky")
    print(floors)
    return floors
def highest_safe_floor(floors, truncated_size=0):
    """highest_safe_floor(floors, truncated_size=0) --> returning the highest safe floor number to throw eggs
    --> I use the concept of DIVIDE AND CONQUER to come up with the minimum trial or dropping of eggs to get
    the highest safe floor number

    :param floor: Array of Strings, specifically either "Safe" or "Risky"
    :param truncated_size: integer, the number of truncated size when we slice the array from the front
    :return: integer
    """

    i = len(floors) // 2

    if floors[i] == "Risky":
        if i - 1 >= 0 and floors[i - 1] == "Safe":
            return i - 1 + 1 + truncated_size
        if i == 0:
            return -1

        return highest_safe_floor(floors[:i], truncated_size)
    else:
        if i == len(floors) - 1:
            return i + truncated_size
        if i + 1 < len(floors) and floors[i + 1] == "Risky":
            return i + 1 + truncated_size

        truncated_size = truncated_size + len(floors[:i+1])
        return highest_safe_floor(floors[i+1:], truncated_size)





if __name__ == "__main__":

    print("Here is the highest safe floor number generated by our code: {}".format(get_highest_floor()))
